countss
DESeq2Features <- data.frame(ensembl_gene_id = bak))
DESeq2Features <- data.frame(ensembl_gene_id = as.vector(bak))
DESeq2Features$ensembl_gene_id <- as.character(DESeq2Features$ensembl_gene_id)
library(dplyr)
### join them together
rowData <- dplyr::left_join(DESeq2Features, bm, by = "ensembl_gene_id")
rowData <- as(rowData, "DataFrame")
### add the annotation to the DESeq2 table
mcols(rowData(DESeq2Table)) <- c(mcols(rowData(DESeq2Table)),rowData)
rowData <- dplyr::left_join(DESeq2Features, bm, by = "ensembl_gene_id")
rowData <- as(rowData, "DataFrame")
rowData <- dplyr::left_join(DESeq2Features, bm, by = "ensembl_gene_id")
bm <- getBM(attributes=c("ensembl_gene_id", "external_gene_id", "description"), filter="ensembl_gene_id", values= rownames(DESeq2Table), mart=ensembl67 )
bm <- getBM(attributes=c("ensembl_gene_id", "external_gene_id", "description"), filter="ensembl_gene_id", values= as.vector(bak), mart=ensembl67 )
### join them together
rowData <- dplyr::left_join(DESeq2Features, bm, by = "ensembl_gene_id")
rowData <- as(rowData, "DataFrame")
### add the annotation to the DESeq2 table
mcols(rowData(DESeq2Table)) <- c(mcols(rowData(DESeq2Table)),rowData)
rowData <- dplyr::left_join(DESeq2Features, bm, by = "ensembl_gene_id")
bm <- getBM(attributes=c("ensembl_gene_id", "external_gene_id", "description"), filter="ensembl_gene_id", values= as.character(bak), mart=ensembl67 )
### join them together
rowData <- dplyr::left_join(DESeq2Features, bm, by = "ensembl_gene_id")
rowData <- as(rowData, "DataFrame")
DESeq2Features <- data.frame(ensembl_gene_id = as.character(bak))
rowData <- dplyr::left_join(DESeq2Features, bm, by = "ensembl_gene_id")
DESeq2Features
class(DESeq2Features$ensembl_gene_id)
bm
bm <- getBM(attributes=c("ensembl_gene_id", "external_gene_id", "description"), filter="ensembl_gene_id", values= bak, mart=ensembl67 )
bm
bm <- getBM(attributes=c("ensembl_gene_id", "external_gene_id", "description"), filter="ensembl_gene_id", values= as.vector(bak), mart=ensembl67 )
bm
bm <- getBM(attributes=c("ensembl_gene_id", "external_gene_id", "description"), filter="ensembl_gene_id", values= bak[1]), mart=ensembl67 )
bm <- getBM(attributes=c("ensembl_gene_id", "external_gene_id", "description"), filter="ensembl_gene_id", values= bak$1, mart=ensembl67 )
bak
bm <- getBM(attributes=c("ensembl_gene_id", "external_gene_id", "description"), filter="ensembl_gene_id", values= bak, mart=ensembl67 )
bm
ensembl76 <- useMart("ensembl", dataset="mmusculus_gene_ensembl")
ensembl76 <- useMart("ensembl", dataset="mmusculus_gene_ensembl")
ensembl67
bm <- getBM(attributes=c("ensembl_gene_id", "external_gene_id", "description"), filter="ensembl_gene_id", values= bak, mart=ensembl67 )
bm
bm <- getBM(attributes=c("ensembl_gene_id", "external_gene_id", "description"), filter="ensembl_gene_id", values= bak, mart=ensembl67)
bm <- getBM(attributes=c("ensembl_gene_id", "external_gene_id", "description"), filter="ensembl_gene_id", values= bak, ma=ensembl67 )
bm
?getBM()
tail(bak)
bm <- getBM(attributes=c("ensembl_gene_id", "external_gene_id", "description"), filter="ensembl_gene_id", values= "gSpikein_ERCC-00170", mart=ensembl67)
bm
bak[100]
bak[10000]
bak[100000]
bak[50000]
bm <- getBM(attributes=c("ensembl_gene_id", "external_gene_id", "description"), filter="ensembl_gene_id", values= "ENSMUSG00000081098.1", mart=ensembl67)
bm
bak1 <- gsub(".*$", "", bak)
bak1
bak1 <- gsub(",.*$", "", bak)
bak1
bak1 <- gsub("..*$", "", bak)
bak1
bak1 <- gsub(",.*$", "", bak)
bak1 <- gsub(",.*$". "", bak)
bak1 <- gsub(",.*$", "". bak)
bak1 <- gsub(".,.*$", "", bak)
bak1
bak1[50000]
bak1 <- gsub(",.*$", "", bak)
bak1[50000]
bak1 <- gsub("..*$", "", bak)
bak1[50000]
bak1 <- gsub(",,*$", "", bak)
bak1[50000]
bak1=sub("\\.*", "", bak)
bak1
bak1[50000]
bak1=sub("\\..*", "", bak)
bak1[50000]
bm <- getBM(attributes=c("ensembl_gene_id", "external_gene_id", "description"), filter="ensembl_gene_id", values= "ENSMUSG00000081098", mart=ensembl67)
bm
bm <- getBM(attributes=c("ensembl_gene_id", "external_gene_id", "description"), filter="ensembl_gene_id", values=as.vector(bak), mart=ensembl67)
bm
as.vector(bak)
bm <- getBM(attributes=c("ensembl_gene_id", "external_gene_id", "description"), filter="ensembl_gene_id", values=as.vector(bak1), mart=ensembl67)
bm
legth(bm)
length(bm)
dim(bm)
dim(bak1)
length(bak1)
tail(bak)
### join them together
rowData <- dplyr::left_join(DESeq2Features, bm, by = "ensembl_gene_id")
rowData <- as(rowData, "DataFrame")
### add the annotation to the DESeq2 table
mcols(rowData(DESeq2Table)) <- c(mcols(rowData(DESeq2Table)),rowData)
#save(DESeq2Table, file = "geneCounts.RData")
library(GenomicRanges)
### join them together
rowData <- dplyr::left_join(DESeq2Features, bm, by = "ensembl_gene_id")
rowData <- as(rowData, "DataFrame")
### add the annotation to the DESeq2 table
mcols(rowData(DESeq2Table)) <- c(mcols(rowData(DESeq2Table)),rowData)
#save(DESeq2Table, file = "geneCounts.RData")
rowData <- dplyr::left_join(DESeq2Features, bm, by = "ensembl_gene_id")
rowData <- as(rowData, "DataFrame")
### join them together
rowData <- dplyr::left_join(DESeq2Features, bm, by = "ensembl_gene_id")
rowData <- as(rowData, "DataFrame")
### add the annotation to the DESeq2 table
mcols(rowData(DESeq2Table)) <- c(mcols(rowData(rsem.de)),rowData)
mcols(rowData(rsem.de)) <- c(mcols(rowData(rsem.de),rowData)
### add the annotation to the DESeq2 table
mcols(rowData(rsem.de)) <- c(mcols(rowData(rsem.de)),rowData)
mcols(rowData(rsem.de)) <- c(mcols(rowData(rsem.de),rowData)
#save(DESeq2Table, file = "geneCounts.RData")
mcols(rowData(rsem.de)) <- c(mcols(rowData(rsem.de),rowData))
#save(DESeq2Table, file = "geneCounts.RData")
mcols(rowData(rsem.de)) <- c(mcols(rowData(rsem.de),rowData))
rowData <- as(rowData, "DataFrame")
rowData
rowData[50000]
rowData[5000]
rowData[500]
rowData <- dplyr::left_join(DESeq2Features, bm, by = "ensembl_gene_id")
rowData
rowData[50000]
rowData[,50000]
rowData[3]
rowData[,5]
rowData[1,3]
rowData[1,500]
rowData[1,5000]
rowData[1,50000]
rowData[2,50000]
rowData[,50000]
rowData
rowData[1,1329]
rowData[1,329]
rowData[2,329]
rowData[(2,329)]
rowData$1
rowData[1]
rowData[1,500]
rowData[1][500]
rowData[1][5]
rowData[1,1)
rowData[1,1]
rowData[1,2]
rowData[2,2]
rowData[2,1]
rowData[2,30]
rowData[3,3]
rowData[2,3]
rowData[3,2]
rowData[2,3]
rowData
rowData[2,10]
rowData[2,1]
rowData[2,]
rowData[2,2]
rowData[2,1]
rowData[,1]
rowData[500,1]
rowData[50000,1]
DESeq2Features <- data.frame(ensembl_gene_id = as.character(bak1))
DESeq2Features$ensembl_gene_id <- as.character(DESeq2Features$ensembl_gene_id)
rowData <- dplyr::left_join(DESeq2Features, bm, by = "ensembl_gene_id")
rowData <- as(rowData, "DataFrame")
mcols(rowData(rsem.de)) <- c(mcols(rowData(rsem.de),rowData))
### add the annotation to the DESeq2 table
mcols(rowData(rsem.de)) <- c(mcols(rowData(rsem.de))
mcols(rowData(rsem.de)) <- c(mcols(rowData(rsem.de)))
install.packages(knitr)
install.packages(rmdformats)
install.packages(dplyr)
install.packages(DT)
install.packages(tidyr)
install.packages(ggplot2)
install.packages(magrittr)
install.packages(devtools)
source('https://bioconductor.org/biocLite.R')
#Needed for mac and Linux only biocLite(Rsubread) ##
biocLite(Rsamtools)
biocLite(GenomicAlignments)
biocLite(TxDb.Hsapiens.UCSC.hg19.knownGene)
biocLite(soGGi)
biocLite(rtracklayer)
biocLite(ChIPQC)
biocLite(ChIPseeker)
biocLite(rGREAT)
biocLite(limma)
biocLite(DESeq2)
biocLite(TxDb.Mmusculus.UCSC.mm10.knownGene)
biocLite(tracktables)
biocLite(clusterProfiler)
biocLite(org.Mm.eg.db)
biocLite(MotifDb)
biocLite(Biostrings)
biocLite(BSgenome.Hsapiens.UCSC.hg19)
Finally we need development version of soGGi (named here 1.10.4) not
version on Bioconductor (1.10.0)
devtools::install_github('ThomasCarroll/soGGi')
library(DESeq2)
library(topGO)
library(ggplot2)
library(pheatmap)
setwd("C:/Users/jfris/Downloads/GitHub/RNA_n_ATAC_hematopoiesis/RNA_ATAC")
gene_matrix=read.csv('gene_count_matrix.csv')
setwd("C:/Users/jfris/Downloads/GitHub/RNA_n_ATAC_hematopoiesis/RNA_ATAC")
gene_matrix=read.csv('gene_count_matrix.csv')
gene_matrix <- gene_matrix[rowSums(gene_matrix[,(2:19)]) > 5, ]
library(DESeq2)
library(topGO)
library(ggplot2)
library(pheatmap)
setwd("C:/Users/jfris/Downloads/GitHub/RNA_n_ATAC_hematopoiesis/RNA_ATAC")
gene_matrix=read.csv('gene_count_matrix.csv')
gene_matrix=read.csv('gene_count_matrix.csv')
gene_matrix=read.csv('gene_count_matrix.csv')
gene_matrix <- gene_matrix[rowSums(gene_matrix[,(2:19)]) > 5, ]
knitr::opts_chunk$set(echo = TRUE)
library(limma)
library(dplyr)
library(DT)
library(GenomicRanges)
library(tidyr)
library(pheatmap)
library(DESeq2)
library(BSgenome.Mmusculus.UCSC.mm10)
library(tracktables)
library(Rsubread)
library(clusterProfiler)
library(enrichplot)
library(ChIPseeker)
library(org.Mm.eg.db)
library(TxDb.Mmusculus.UCSC.mm10.knownGene)
library(gplots)
library(ggplot2)
setwd("~/Documents/GitHub/RNA_n_ATAC_hematopoiesis")
countData=read.csv('gene_count_matrix.csv', header=TRUE,as.is = TRUE, row.names = 1)
head(countData)
#countData$gene_id=unlist(lapply(strsplit(countData$gene_id, '|', fixed = TRUE), '[', 2))
#countData=na.omit(countData)
#rownames(countData) = make.names(countData[,1],unique=TRUE)
#countData=countData[,-1]
columns=c("SEDM_2P_1","SEDM_2P_2","SEDM_2P_3","SEEM_2P_1","SEEM_2P_2","SEEM_2P_3","SEEM_4P_1","SEEM_4P_2","SEEM_4P_3","PERKi_2P_1","PERKi_2P_2","PERKi_2P_3", "PERKi_2N_1","PERKi_2N_2","PERKi_2N_3","T_1","T_2","T_3")
colnames(countData)=columns
colSums(countData)
barplot(colSums(countData),las=3)
hist(countData$SEDM_2P_1,br=100)
logCountData=log2(1+countData)
hist(logCountData$SEDM_2P_1,br=100)
plot(logCountData[,16],logCountData[,17])
treatment=as.factor(c(1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6))
inh=c(1,1,1,1,1,1,1,1,1,2,2,2,1,1,1,2,2,2)
colData=as.data.frame(cbind(colnames(countData), inh, treatment))
dds=DESeqDataSetFromMatrix(countData = countData, colData = colData, design=~inh)
dds=DESeq(dds)
dds= dds[rowSums(counts(dds))>5,]
nrow(dds)
library(ggplot2)
rld=rlog(dds)
plotPCA(rld, intgroup= c("inh","treatment"))
detectGroups <- function (x){  # x are col names
tem <- gsub("[0-9]*$","",x) # Remove all numbers from end
#tem = gsub("_Rep|_rep|_REP","",tem)
tem <- gsub("_$","",tem); # remove "_" from end
tem <- gsub("_Rep$","",tem); # remove "_Rep" from end
tem <- gsub("_rep$","",tem); # remove "_rep" from end
tem <- gsub("_REP$","",tem)  # remove "_REP" from end
return( tem )
}
detectGroups(colnames(countData))
dist2 <- function(x, ...)   # distance function = 1-PCC (Pearson's correlation coefficient)
as.dist(1-cor(t(x), method="pearson"))
library(gplots)
hclust2 <- function(x, method="average", ...)  # average linkage in hierarchical clustering
hclust(x, method=method, ...)
n=10000 # number of top genes by standard deviation
x = assay(rld)
if(n>dim(x)[1]) n = dim(x)[1] # max	as data
x = x[order(apply(x,1,sd),decreasing=TRUE),]  # sort genes by standard deviation
x = x[1:n,]   # only keep the n genes
# this will cutoff very large values, which could skew the color
x=as.matrix(x[1:n,])-apply(x[1:n,],1,mean)
cutoff = median(unlist(x)) + 4*sd (unlist(x))
x[x>cutoff] <- cutoff
cutoff = median(unlist(x)) - 4*sd (unlist(x))
x[x< cutoff] <- cutoff
groups = detectGroups(colnames(x) )
groups.colors = rainbow(length(unique(groups) ) )
lmat = rbind(c(5,4),c(0,1),c(3,2))
lwid = c(1.5,4)
lhei = c(1,.2,4)
heatmap.2(x, distfun = dist2,hclustfun=hclust2,
col=greenred(75), density.info="none", trace="none", scale="none", keysize=.5
,key=T, symkey=F
,ColSideColors=groups.colors[ as.factor(groups)]
,cexRow=1
,srtCol=45
,cexCol=1.  # size of font for sample names
,lmat = lmat, lwid = lwid, lhei = lhei
)
resultsNames(dds)
res=results(dds)
summary(res)
res=results(dds,lfcThreshold = 0.01)
library(AnnotationDbi)
library(org.Mm.eg.db)
head(countData)
countData=read.csv('gene_count_matrix.csv', header=TRUE,as.is = TRUE, row.names = 1)
head(countData)
row.names(countData)=unlist(lapply(strsplit(row.names(countData), '|', fixed = TRUE), '[', 2))
countData=read.csv('gene_count_matrix.csv', header=TRUE,as.is = TRUE, row.names = 1)
countData=as.matrix(countData)
row.names(countData)=unlist(lapply(strsplit(row.names(countData), '|', fixed = TRUE), '[', 2))
#countData$gene_id=unlist(lapply(strsplit(countData$gene_id, '|', fixed = TRUE), '[', 2))
#countData=na.omit(countData)
#rownames(countData) = make.names(countData[,1],unique=TRUE)
#countData=countData[,-1]
columns=c("SEDM_2P_1","SEDM_2P_2","SEDM_2P_3","SEEM_2P_1","SEEM_2P_2","SEEM_2P_3","SEEM_4P_1","SEEM_4P_2","SEEM_4P_3","PERKi_2P_1","PERKi_2P_2","PERKi_2P_3", "PERKi_2N_1","PERKi_2N_2","PERKi_2N_3","T_1","T_2","T_3")
colnames(countData)=columns
colSums(countData)
barplot(colSums(countData),las=3)
hist(countData$SEDM_2P_1,br=100)
hist(countData[,1],br=100)
logCountData=log2(1+countData)
hist(logCountData$SEDM_2P_1,br=100)
logCountData=log2(1+countData)
hist(logCountData$[1],br=100)
logCountData=log2(1+countData)
hist(logCountData[,1],br=100)
plot(logCountData[,16],logCountData[,17])
treatment=as.factor(c(1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6))
inh=c(1,1,1,1,1,1,1,1,1,2,2,2,1,1,1,2,2,2)
colData=as.data.frame(cbind(colnames(countData), inh, treatment))
dds=DESeqDataSetFromMatrix(countData = countData, colData = colData, design=~inh)
colData
dds=DESeqDataSetFromMatrix(countData = countData, colData = colData, design=~inh)
treatment=as.factor(c(1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6))
inh=c(1,1,1,1,1,1,1,1,1,2,2,2,1,1,1,2,2,2)
colData=as.data.frame(cbind(colnames(countData), inh, treatment))
colData
countData
#setwd("~/Documents/GitHub/RNA_n_ATAC_hematopoiesis")
countData=read.csv('gene_count_matrix.csv', header=TRUE,as.is = TRUE, row.names = 1)
countData=as.matrix(countData)
countData$gene_id=unlist(lapply(strsplit(countData$gene_id, '|', fixed = TRUE), '[', 2))
countData$gene_id=unlist(lapply(strsplit(row.names(countData), '|', fixed = TRUE), '[', 2))
countData=na.omit(countData)
rownames(countData) = make.names(countData[,1],unique=TRUE)
countData
#setwd("~/Documents/GitHub/RNA_n_ATAC_hematopoiesis")
countData=read.csv('gene_count_matrix.csv', header=TRUE,as.is = TRUE, row.names = 1)
countData=as.matrix(countData)
countData
countData$gene_id=unlist(lapply(strsplit(row.names(countData), '|', fixed = TRUE), '[', 2))
countData
row.names(countData)=unlist(lapply(strsplit(row.names(countData), '|', fixed = TRUE), '[', 2))
countData
#setwd("~/Documents/GitHub/RNA_n_ATAC_hematopoiesis")
countData=read.csv('gene_count_matrix.csv', header=TRUE,as.is = TRUE, row.names = 1)
countData=as.matrix(countData)
row.names(countData)=unlist(lapply(strsplit(row.names(countData), '|', fixed = TRUE), '[', 2))
countData=na.omit(countData)
rownames(countData) = make.names(countData[,1],unique=TRUE)
countData=countData[,-1]
#setwd("~/Documents/GitHub/RNA_n_ATAC_hematopoiesis")
countData=read.csv('gene_count_matrix.csv', header=TRUE,as.is = TRUE, row.names = 1)
countData=as.matrix(countData)
#setwd("~/Documents/GitHub/RNA_n_ATAC_hematopoiesis")
countData=read.csv('gene_count_matrix.csv', header=TRUE,as.is = TRUE, row.names = 1)
countData=as.matrix(countData)
row.names(countData)=unlist(lapply(strsplit(row.names(countData), '|', fixed = TRUE), '[', 2))
countData=na.omit(countData)
rownames(countData) = make.names(row.names(countData),unique=TRUE)
#countData=countData[,-1]
countData
#setwd("~/Documents/GitHub/RNA_n_ATAC_hematopoiesis")
countData=read.csv('gene_count_matrix.csv', header=TRUE,as.is = TRUE, row.names = 1)
countData=as.matrix(countData)
row.names(countData)=unlist(lapply(strsplit(row.names(countData), '|', fixed = TRUE), '[', 2))
countData=na.omit(countData)
countData <- countData[grepl("^NA", rownames(df))==F,]
rownames(countData) = make.names(row.names(countData),unique=TRUE)
#countData=countData[,-1]
countData
#setwd("~/Documents/GitHub/RNA_n_ATAC_hematopoiesis")
countData=read.csv('gene_count_matrix.csv', header=TRUE,as.is = TRUE, row.names = 1)
countData=as.matrix(countData)
row.names(countData)=unlist(lapply(strsplit(row.names(countData), '|', fixed = TRUE), '[', 2))
countData=na.omit(countData)
countData <- countData[grepl("^NA", rownames(df))==F,]
countData.df
countData
#setwd("~/Documents/GitHub/RNA_n_ATAC_hematopoiesis")
countData=read.csv('gene_count_matrix.csv', header=TRUE,as.is = TRUE, row.names = 1)
countData=as.matrix(countData)
row.names(countData)=unlist(lapply(strsplit(row.names(countData), '|', fixed = TRUE), '[', 2))
countData=na.omit(countData)
countData <- countData[grepl("^NA", rownames(countData))==F,]
rownames(countData) = make.names(row.names(countData),unique=TRUE)
#countData=countData[,-1]
countData
#setwd("~/Documents/GitHub/RNA_n_ATAC_hematopoiesis")
countData=read.csv('gene_count_matrix.csv', header=TRUE,as.is = TRUE, row.names = 1)
countData=as.matrix(countData)
#setwd("~/Documents/GitHub/RNA_n_ATAC_hematopoiesis")
countData=read.csv('gene_count_matrix.csv', header=TRUE,as.is = TRUE, row.names = 1)
countData=as.matrix(countData)
row.names(countData)=unlist(lapply(strsplit(row.names(countData), '|', fixed = TRUE), '[', 2))
countData <- countData[grepl("NA", rownames(countData)),]
rownames(countData) = make.names(row.names(countData),unique=TRUE)
#countData=countData[,-1]
countData
row.names(countData)=unlist(lapply(strsplit(row.names(countData), '|', fixed = TRUE), '[', 2))
#setwd("~/Documents/GitHub/RNA_n_ATAC_hematopoiesis")
countData=read.csv('gene_count_matrix.csv', header=TRUE,as.is = TRUE, row.names = 1)
countData=as.matrix(countData)
row.names(countData)=unlist(lapply(strsplit(row.names(countData), '|', fixed = TRUE), '[', 2))
countData <- countData[grepl("NA", rownames(countData)),]
rownames(countData) = make.names(row.names(countData),unique=TRUE)
#countData=countData[,-1]
countData
#setwd("~/Documents/GitHub/RNA_n_ATAC_hematopoiesis")
countData=read.csv('gene_count_matrix.csv', header=TRUE,as.is = TRUE, row.names = 1)
countData=as.matrix(countData)
row.names(countData)=unlist(lapply(strsplit(row.names(countData), '|', fixed = TRUE), '[', 2))
countData <- countData[!grepl("NA", rownames(countData)),]
rownames(countData) = make.names(row.names(countData),unique=TRUE)
#countData=countData[,-1]
countData
#setwd("~/Documents/GitHub/RNA_n_ATAC_hematopoiesis")
countData=read.csv('gene_count_matrix.csv', header=TRUE,as.is = TRUE, row.names = 1)
countData=as.matrix(countData)
row.names(countData)=unlist(lapply(strsplit(row.names(countData), '|', fixed = TRUE), '[', 2))
countData <- countData[!grepl("NA.*", rownames(countData)),]
rownames(countData) = make.names(row.names(countData),unique=TRUE)
#countData=countData[,-1]
countData
#setwd("~/Documents/GitHub/RNA_n_ATAC_hematopoiesis")
countData=read.csv('gene_count_matrix.csv', header=TRUE,as.is = TRUE, row.names = 1)
countData=as.matrix(countData)
row.names(countData)=unlist(lapply(strsplit(row.names(countData), '|', fixed = TRUE), '[', 2))
countData <- countData[!grepl("NA..", rownames(countData)),]
rownames(countData) = make.names(row.names(countData),unique=TRUE)
#countData=countData[,-1]
countData
columns=c("SEDM_2P_1","SEDM_2P_2","SEDM_2P_3","SEEM_2P_1","SEEM_2P_2","SEEM_2P_3","SEEM_4P_1","SEEM_4P_2","SEEM_4P_3","PERKi_2P_1","PERKi_2P_2","PERKi_2P_3", "PERKi_2N_1","PERKi_2N_2","PERKi_2N_3","T_1","T_2","T_3")
colnames(countData)=columns
colSums(countData)
barplot(colSums(countData),las=3)
hist(countData[,1],br=100)
logCountData=log2(1+countData)
hist(logCountData[,1],br=100)
plot(logCountData[,16],logCountData[,17])
treatment=as.factor(c(1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6))
inh=c(1,1,1,1,1,1,1,1,1,2,2,2,1,1,1,2,2,2)
colData=as.data.frame(cbind(colnames(countData), inh, treatment))
dds=DESeqDataSetFromMatrix(countData = countData, colData = colData, design=~inh)
dds=DESeq(dds)
dds= dds[rowSums(counts(dds))>5,]
nrow(dds)
library(ggplot2)
rld=rlog(dds)
plotPCA(rld, intgroup= c("inh","treatment"))
detectGroups <- function (x){  # x are col names
tem <- gsub("[0-9]*$","",x) # Remove all numbers from end
#tem = gsub("_Rep|_rep|_REP","",tem)
tem <- gsub("_$","",tem); # remove "_" from end
tem <- gsub("_Rep$","",tem); # remove "_Rep" from end
tem <- gsub("_rep$","",tem); # remove "_rep" from end
tem <- gsub("_REP$","",tem)  # remove "_REP" from end
return( tem )
}
detectGroups(colnames(countData))
dist2 <- function(x, ...)   # distance function = 1-PCC (Pearson's correlation coefficient)
as.dist(1-cor(t(x), method="pearson"))
detectGroups(colnames(countData))
dist2 <- function(x, ...)   # distance function = 1-PCC (Pearson's correlation coefficient)
as.dist(1-cor(t(x), method="pearson"))
library(gplots)
hclust2 <- function(x, method="average", ...)  # average linkage in hierarchical clustering
hclust(x, method=method, ...)
n=10000 # number of top genes by standard deviation
x = assay(rld)
if(n>dim(x)[1]) n = dim(x)[1] # max	as data
x = x[order(apply(x,1,sd),decreasing=TRUE),]  # sort genes by standard deviation
x = x[1:n,]   # only keep the n genes
# this will cutoff very large values, which could skew the color
x=as.matrix(x[1:n,])-apply(x[1:n,],1,mean)
cutoff = median(unlist(x)) + 4*sd (unlist(x))
x[x>cutoff] <- cutoff
cutoff = median(unlist(x)) - 4*sd (unlist(x))
x[x< cutoff] <- cutoff
groups = detectGroups(colnames(x) )
groups.colors = rainbow(length(unique(groups) ) )
lmat = rbind(c(5,4),c(0,1),c(3,2))
lwid = c(1.5,4)
lhei = c(1,.2,4)
heatmap.2(x, distfun = dist2,hclustfun=hclust2,
col=greenred(75), density.info="none", trace="none", scale="none", keysize=.5
,key=T, symkey=F
,ColSideColors=groups.colors[ as.factor(groups)]
,cexRow=1
,srtCol=45
,cexCol=1.  # size of font for sample names
,lmat = lmat, lwid = lwid, lhei = lhei
)
