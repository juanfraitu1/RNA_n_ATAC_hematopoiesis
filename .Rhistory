new=na.omit(new)
new1=na.omit(new)
new=read.csv('gene_count_matrix.csv', header = TRUE, sep=",")
new$gene_id=unlist(lapply(strsplit(new$gene_id, '|', fixed = TRUE), '[', 2))
new
library(AnnotationDbi)
library(org.Mm.eg.db)
new$ENSEMBL=gsub("\\..*","", row.names(new))
new
new=new[,-3]
new
new$SYMBOL= mapIds(org.Mm.eg.db, key=res$ENSEMBLID, column="SYMBOL", keytype = "ENSEMBLID", multiVals = "first")
columns(org.Mm.eg.db)
new$SYMBOL= mapIds(org.Mm.eg.db, key=res$ENSEMBL, column="SYMBOL", keytype = "ENSEMBL", multiVals = "first")
new$SYMBOL= mapIds(org.Mm.eg.db, key=res$ENSEMBL, column=row.names(new), keytype = "ENSEMBL", multiVals = "first")
new$SYMBOL= mapIds(org.Mm.eg.db, key=row,names(new), column="SYMBOL", keytype = "ENSEMBL", multiVals = "first")
new$ENSEMBL=colnames(new)
new$ENSEMBL=rowames(new)
new$ENSEMBL=rownames(new)
new
new$SYMBOL= mapIds(org.Mm.eg.db, key=gene_id, column="SYMBOL", keytype = "ENSEMBL", multiVals = "first")
new$SYMBOL= mapIds(org.Mm.eg.db, key=new$gene_id, column="SYMBOL", keytype = "ENSEMBL", multiVals = "first")
new
View(countData)
new=na.omit(new)
new
new=complete.cases(new)
new=as.data.frame(new)
new=complete.cases(new)
new[complete.cases(new),]
new[complete.cases(new),]
delete.na <- function(DF, n=0) {
DF[rowSums(is.na(DF)) <= n,]
}
new=delete.na(new)
new
new=new[,-1]
rownames(new)=new$SYMBOL
rownames(new)=new$SYMBOL
new=as.matrix(new)
rownames(new)=new$SYMBOL
new
new=read.csv('gene_count_matrix.csv', header = TRUE, sep=",")
new
delete.na <- function(DF, n=0) {
DF[rowSums(is.na(DF)) <= n,]
}
new1=unlist(lapply(strsplit(new$gene_id, '|', fixed = TRUE), '[', 2))
new$gene_id=unlist(lapply(strsplit(new$gene_id, '|', fixed = TRUE), '[', 2))
new$SYMBOL= mapIds(org.Mm.eg.db, key=new$gene_id, column="SYMBOL", keytype = "ENSEMBL", multiVals = "first")
new
delete.na <- function(DF, n=0) {
DF[rowSums(is.na(DF)) <= n,]
}
new=delete.na(new)
new
row.names(new) = new$SYMBOL
new=as.matrix(new)
row.names(new) = new$SYMBOL
new
row.names(new) = new$SYMBOL
new
new=new[,-1]
new
new=new[,c(4,1,2,3)]
new
?merge(x=countData,y=new,)
?merge(x=countData,y=new,by)
View(as.data.frame(new))
colnames(new)=new$SYMBOL
new
View(as.data.frame(new))
new=as.data.frame(new)
colnames(new)=new$SYMBOL
new
new=read.csv('gene_count_matrix.csv', header = TRUE, sep=",")
new$gene_id=unlist(lapply(strsplit(new$gene_id, '|', fixed = TRUE), '[', 2))
new$SYMBOL= mapIds(org.Mm.eg.db, key=new$gene_id, column="SYMBOL", keytype = "ENSEMBL", multiVals = "first")
new
new=delete.na(new)
new
new=new[,c(5,1,2,3,4)]
new\
new
new=as.matrix(new)
row.names(new)=new$SYMBOL
new
new=as.data.frame(new)
new
row.names(new)=new$SYMBOL
rownames(new) = make.names(new[,1],unique=TRUE)
new
new=new[,-c(1,2)]
new
final=merge(countData,new,by=row.names())
final=merge(countData,new,by=0, all=TRUE)
final
final[is.na(final)] <- 0
final
write.csv(final,'complete.csv')
write.csv(final,'complete.csv', col.names=TRUE, row.names=TRUE)
write.csv(final,'complete.csv')
?write.csv()
?write.csv()
write.csv(final,file = 'complete.csv')
write.csv(final,file = 'complete.csv', row.names = 0)
setwd("~/Documents/GitHub/RNA_n_ATAC_hematopoiesis")
write.csv(final,file = 'complete.csv', row.names = 0)
wd
write.csv(final,file = '~/Documents/GitHub/RNA_n_ATAC_hematopoiesis/complete.csv', row.names = 0)
write.csv(final,file = '~/Documents/GitHub/RNA_n_ATAC_hematopoiesis/complete.csv')
write.csv(final,file = '~/Documents/GitHub/RNA_n_ATAC_hematopoiesis/complete.csv', sep=",")
write.table(final,file = '~/Documents/GitHub/RNA_n_ATAC_hematopoiesis/complete.txt', sep="|")
new1=apply(new,2,as.character)
new1
sapply(new,class)
new1=as.data.frame(new)
new1=apply(final,2,as.character)
new1=apply(final,2,as.character)
sapply(final,class)
new2=sapply(final,as.numeric)
new2=sapply(final,final[,as.numeric()])
new2=sapply(final,as.numeric
new2=sapply(final,as.numeric)
new2
new2=sapply(final[1],as.numeric)
columns(final)
ncol(final)
new2=sapply(final[1:19],as.numeric)
new2
new2=sapply(final[2:19],as.numeric)
new2
row.names(new2)=row.names(final)
new2
row.names(new2)=final$Row.names
new2
write.csv(new2,'complete.csv')
knitr::opts_chunk$set(echo = TRUE)
library(limma)
library(dplyr)
library(DT)
library(GenomicRanges)
library(tidyr)
library(pheatmap)
library(DESeq2)
library(BSgenome.Mmusculus.UCSC.mm10)
library(tracktables)
library(Rsubread)
library(clusterProfiler)
library(enrichplot)
library(ChIPseeker)
library(org.Mm.eg.db)
library(TxDb.Mmusculus.UCSC.mm10.knownGene)
library(gplots)
library(ggplot2)
countData=read.csv('gene_count_matrix.csv', header=TRUE,as.is = TRUE)
head(countData)
countData$gene_id=unlist(lapply(strsplit(countData$gene_id, '|', fixed = TRUE), '[', 2))
countData=na.omit(countData)
rownames(countData) = make.names(countData[,1],unique=TRUE)
countData=countData[,-1]
knitr::opts_chunk$set(echo = TRUE)
library(limma)
library(dplyr)
library(DT)
library(GenomicRanges)
library(tidyr)
library(pheatmap)
library(DESeq2)
library(BSgenome.Mmusculus.UCSC.mm10)
library(tracktables)
library(Rsubread)
library(clusterProfiler)
library(enrichplot)
library(ChIPseeker)
library(org.Mm.eg.db)
library(TxDb.Mmusculus.UCSC.mm10.knownGene)
library(gplots)
library(ggplot2)
setwd("~/Documents/GitHub/RNA_n_ATAC_hematopoiesis")
countData=read.csv('complete.csv', header=TRUE,as.is = TRUE, row.names = 0)
setwd("~/Documents/GitHub/RNA_n_ATAC_hematopoiesis")
countData=read.csv('complete.csv', header=TRUE,as.is = TRUE)
head(countData)
setwd("~/Documents/GitHub/RNA_n_ATAC_hematopoiesis")
countData=read.csv('complete.csv', header=TRUE,as.is = TRUE, row.names = 0)
setwd("~/Documents/GitHub/RNA_n_ATAC_hematopoiesis")
countData=read.csv('complete.csv', header=TRUE,as.is = TRUE, row.names = TRUE)
setwd("~/Documents/GitHub/RNA_n_ATAC_hematopoiesis")
countData=read.csv('complete.csv', header=TRUE,as.is = TRUE, row.names = 1)
head(countData)
countData$gene_id=unlist(lapply(strsplit(countData$gene_id, '|', fixed = TRUE), '[', 2))
#countData$gene_id=unlist(lapply(strsplit(countData$gene_id, '|', fixed = TRUE), '[', 2))
#countData=na.omit(countData)
#rownames(countData) = make.names(countData[,1],unique=TRUE)
#countData=countData[,-1]
columns=c("SEDM_2P_1","SEDM_2P_2","SEDM_2P_3","SEEM_2P_1","SEEM_2P_2","SEEM_2P_3","SEEM_4P_1","SEEM_4P_2","SEEM_4P_3","PERKi_1","PERKi_2","PERKi_3","T_1","T_2","T_3")
columns=c("SEDM_2P_1","SEDM_2P_2","SEDM_2P_3","SEEM_2P_1","SEEM_2P_2","SEEM_2P_3","SEEM_4P_1","SEEM_4P_2","SEEM_4P_3","PERKi_2N_1","PERKi_2N_2","PERKi_2N_3","T_1","T_2","T_3","PERKi_2P_1","PERKi_2P_2","PERKi_2P_3")
colnames(countData)=columns
colSums(countData)
barplot(colSums(countData),las=3)
hist(countData$SEDM_2P_1,br=100)
logCountData=log2(1+countData)
hist(logCountData$SEDM_2P_1,br=100)
plot(logCountData[,1],logCountData[,2])
treatment=c("F0","F0","F0","F1","F1","F1","F2","F2","F2","F3","F3","F3","F4","F4","F4")
inh=c(rep("U",9),"I", "I","I",rep("U",3))
colData=as.data.frame(cbind(colnames(countData), inh, treatment))
treatment=c("F0","F0","F0","F1","F1","F1","F2","F2","F2","F3","F3","F3","F4","F4","F4","F5","F5","F5")
inh=c(rep("U",9),"I", "I","I",rep("U",3),"I", "I","I")
colData=as.data.frame(cbind(colnames(countData), inh, treatment))
dds=DESeqDataSetFromMatrix(countData = countData, colData =  colData, design= ~treatment)
dds=DESeq(dds)
dds= dds[rowSums(counts(dds))>5,]
nrow(dds)
library(ggplot2)
rld=rlog(dds)
plotPCA(rld, intgroup= "treatment")
detectGroups <- function (x){  # x are col names
tem <- gsub("[0-9]*$","",x) # Remove all numbers from end
#tem = gsub("_Rep|_rep|_REP","",tem)
tem <- gsub("_$","",tem); # remove "_" from end
tem <- gsub("_Rep$","",tem); # remove "_Rep" from end
tem <- gsub("_rep$","",tem); # remove "_rep" from end
tem <- gsub("_REP$","",tem)  # remove "_REP" from end
return( tem )
}
detectGroups(colnames(countData))
dist2 <- function(x, ...)   # distance function = 1-PCC (Pearson's correlation coefficient)
as.dist(1-cor(t(x), method="pearson"))
library(gplots)
hclust2 <- function(x, method="average", ...)  # average linkage in hierarchical clustering
hclust(x, method=method, ...)
n=10000 # number of top genes by standard deviation
x = assay(rld)
if(n>dim(x)[1]) n = dim(x)[1] # max	as data
x = x[order(apply(x,1,sd),decreasing=TRUE),]  # sort genes by standard deviation
x = x[1:n,]   # only keep the n genes
# this will cutoff very large values, which could skew the color
x=as.matrix(x[1:n,])-apply(x[1:n,],1,mean)
cutoff = median(unlist(x)) + 4*sd (unlist(x))
x[x>cutoff] <- cutoff
cutoff = median(unlist(x)) - 4*sd (unlist(x))
x[x< cutoff] <- cutoff
groups = detectGroups(colnames(x) )
groups.colors = rainbow(length(unique(groups) ) )
lmat = rbind(c(5,4),c(0,1),c(3,2))
lwid = c(1.5,4)
lhei = c(1,.2,4)
heatmap.2(x, distfun = dist2,hclustfun=hclust2,
col=greenred(75), density.info="none", trace="none", scale="none", keysize=.5
,key=T, symkey=F
,ColSideColors=groups.colors[ as.factor(groups)]
,cexRow=1
,srtCol=45
,cexCol=1.  # size of font for sample names
,lmat = lmat, lwid = lwid, lhei = lhei
)
resultsNames(dds)
res=results(dds)
summary(res)
res=results(dds,lfcThreshold = 0.01)
DESeq2::plotMA(res,ylim=c(-5,5))
library(dplyr)
res1=as.data.frame(res)
View(res1)
res1=mutate(res1,sig=ifelse(res1$padj<0.1, "FDR<0.1","Not Significant"))
res1[which(abs(res1$log2FoldChange)<1.0),"Significant"] = "Not Significant"
library(dplyr)
res1=as.data.frame(res)
View(res1)
res1=mutate(res1,sig=ifelse(res1$padj<0.1, "FDR<0.1","Not Significant"))
res1[which(abs(res1$log2FoldChange)<1.0),"Significant"] = "Not Significant"
library(ggplot2)
ggplot(res1, aes(log2FoldChange, -log10(padj))) + geom_point(aes(col=sig)) + scale_color_manual(values=c("red","black"))
res=res[order(abs(res$log2FoldChange), decreasing=TRUE),]
topGene=rownames(res)[1]
plotCounts(dds, gene=topGene, intgroup = "treatment")
library(AnnotationDbi)
library(org.Mm.eg.db)
res$SYMBOL=gsub("\\..*","", row.names(res))
res$ENTREZID= mapIds(org.Mm.eg.db, key=res$SYMBOL, column="ENTREZID", keytype = "SYMBOL", multiVals = "first")
#write.csv(res, file='treatments-0.1_lfc-1_results.csv')
library(GO.db)
library(GOstats)
res_05=as.data.frame(subset(res, padj<0.05))
sig_lfc= 4
selectGenesUp= unique(res_05[res_05$log2FoldChange>sig_lfc, "ENTREZID"])
selectGenesDown= unique(res_05[res_05$log2FoldChange>-(sig_lfc), "ENTREZID"])
universeGenes= unique(res_05$ENTREZID)
cutOff= 0.01
UpParams=new("GOHyperGParams", geneIds=selectGenesUp, universeGeneIds=universeGenes, annotation=org.Mm.eg.db, ontology="BP", pvalueCutoff=cutOff, conditional=FALSE, testDirection="over")
DownParams=new("GOHyperGParams", geneIds=selectGenesDown, universeGeneIds=universeGenes, annotation=org.Mm.eg.db, ontology="BP", pvalueCutoff=cutOff, conditional=FALSE, testDirection="over")
upBP=hyperGTest(UpParams)
summary(upBP)[1:10,]
downBP=hyperGTest(DownParams)
summary(downBP)[1:10,]
plot(logCountData[,18],logCountData[,19])
plot(logCountData[,18],logCountData[,19])
plot(logCountData[,17],logCountData[,18])
plot(logCountData[,16],logCountData[,17])
dds=DESeqDataSetFromMatrix(countData = countData, colData =  colData, design= ~treatment+inh)
colData
treatment=c("C","C","C", "E","E","E","E","E","E","E", "I","I","I","L","L","L","I","I","I")
inh=c(rep("U",9),"I", "I","I",rep("U",3),"I", "I","I")
colData=as.data.frame(cbind(colnames(countData), inh, treatment))
treatment=c("C","C","C", "E","E","E","E","E","E", "I","I","I","L","L","L","I","I","I")
inh=c(rep("U",9),"I", "I","I",rep("U",3),"I", "I","I")
colData=as.data.frame(cbind(colnames(countData), inh, treatment))
dds=DESeqDataSetFromMatrix(countData = countData, colData =  colData, design= ~treatment+inh)
dds=DESeqDataSetFromMatrix(countData = countData, colData =  colData, design= ~treatment*inh)
dds=DESeqDataSetFromMatrix(countData = countData, colData =  colData, design= ~treatment*inh+inh)
colData
?DESeq2
??DESeq2
package_version("DESeq2")
packageVersion("DESeq2")
mm=model.matrix(~treatment+inh+inh:treatment)
dds=DESeqDataSetFromMatrix(countData = countData, colData =  colData, design= ~treatment*inh+inh)
colData(dds)
dds=DESeq(dds, full=mm, betaPrior = FALSE)
mm=model.matrix(~treatment+inh+inh:treatment, colDdata(dds))
mm=model.matrix(~treatment+inh+inh:treatment, colData(dds))
dds=DESeq(dds, full=mm, betaPrior = FALSE)
mm
colData
dds=DESeqDataSetFromMatrix(countData = countData, colData =  colData, design= ~V1+inh+inh*V1)
dds
colData
treatment=as.factor(c(1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6))
colData
treatment=as.factor(c(1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6))
inh=c(rep("U",9),"I", "I","I",rep("U",3),"I", "I","I")
colData=as.data.frame(cbind(colnames(countData), inh, treatment))
colData
dds=DESeqDataSetFromMatrix(countData = countData, colData =  colData, design= ~V1+inh:treatment+inh*V1)
dds=DESeqDataSetFromMatrix(countData = countData, colData =  colData, design= ~V1+treatment+inh*V1)
dds=DESeqDataSetFromMatrix(countData = countData, colData =  colData, design= ~V1+treatment+inh)
colData
```{r}
dds=DESeqDataSetFromMatrix(countData = countData, colData =  colData, design= ~V1:treatment+inh)
colData
dds=DESeqDataSetFromMatrix(countData = countData, colData =  colData, design= ~V1:treatment+inh:treatment)
dds=DESeqDataSetFromMatrix(countData = countData, colData =  colData, design= ~V1+inh:treatment)
dds=DESeqDataSetFromMatrix(countData = countData, colData =  colData, design= ~inh:treatment)
colData
nested=c(rep(1:3),6)
colData=as.data.frame(cbind(colnames(countData), inh, treatment, nested))
nested
nested=c(rep(1:3,6))
nested
colData=as.data.frame(cbind(colnames(countData), inh, treatment, nested))
colData
dds=DESeqDataSetFromMatrix(countData = countData, colData =  colData, design= ~inh+inh:nested+inh:treatment)
colData
dds=DESeqDataSetFromMatrix(countData = countData, colData =  colData, design= ~treatment+nested)
dds=DESeqDataSetFromMatrix(countData = countData, colData =  colData, design= ~treatment+nested+inh)
dds=DESeqDataSetFromMatrix(countData = countData, colData =  colData, design= ~treatment+nested+inh:treatment)
colData
dds=DESeqDataSetFromMatrix(countData = countData, colData =  colData, design= ~treatment+nested+treatment:inh)
dds=DESeqDataSetFromMatrix(countData = countData, colData =  colData, design= ~nested+treatment:inh)
dds=DESeqDataSetFromMatrix(countData = countData, colData =  colData, design= ~treatment:inh)
colData
dds=DESeqDataSetFromMatrix(countData = countData, colData =  colData, design= ~inh+treatment)
?DESeqDataSetFromMatrix()
dds=DESeqDataSetFromMatrix(countData = countData, colData =  colData, design= ~inh+treatment, ignoreRank = FALSE)
dds=DESeqDataSetFromMatrix(countData = countData, colData =  colData, design= ~inh+treatment+inh*treatment, ignoreRank = FALSE)
dds=DESeqDataSetFromMatrix(countData = countData, colData =  colData, design= ~inh+inh*treatment, ignoreRank = FALSE)
dds=DESeqDataSetFromMatrix(countData = countData, colData =  colData, design= ~treatment+inh*treatment, ignoreRank = FALSE)
dds=DESeqDataSetFromMatrix(countData = countData, colData =  colData, design= ~nested+inh*treatment, ignoreRank = FALSE)
colData
treatment=as.factor(c(1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6))
inh=c(rep("U",9),"I", "I","I",rep("U",3),"I", "I","I")
nested=c(rep(1:3,6))
extra=c("1","1","1","2","2","2","3","3","3","2","2","2","4","4","4","5","5","5")
colData=as.data.frame(cbind(colnames(countData), inh, treatment, nested, extra))
model.matrix(~inh+inh:extra+inh:nested, coldata)
model.matrix(~inh+inh:extra+inh:nested, colData)
treatment=as.factor(c(1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6))
inh=c(rep("U",9),"I", "I","I",rep("U",3),"I", "I","I")
nested=c(rep(1:3,6))
extra=c("1","1","1","2","2","2","3","3","3","2","2","2","3","3","3","4","4","4")
colData=as.data.frame(cbind(colnames(countData), inh, treatment, nested, extra))
treatment=as.factor(c(1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6))
colData
colData
model.matrix(~inh+inh:extra+inh:nested, colData)
colData
model.matrix(~inh+inh:extra+inh:treatment, colData)
model.matrix(~inh+inh:extra+inh:treatment:extra, colData)
model.matrix(~inh+inh:treatment:extra, colData)
model.matrix(~inh+treatment:extra, colData)
model.matrix(~inh:treatment+treatment colData)
model.matrix(~inh:treatment+treatment, colData)
coldata
colData
treatment=as.factor(c(1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6))
inh=c(rep("1",9),"2", "2","2",rep("1",3),"2","2","2")
nested=c(rep(1:3,6))
extra=c("1","1","1","2","2","2","3","3","3","2","2","2","3","3","3","4","4","4")
colData=as.data.frame(cbind(colnames(countData), inh, treatment, nested, extra))
model.matrix(~inh:treatment+treatment, colData)
model.matrix(~inh+treatment, colData)
treatment=as.factor(c(1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6))
inh=c(rep("1",9),"2", "2","2",rep("1",3),"2","2","2")
nested=c(rep(1:3,6))
extra=c("1","1","1","2","2","2","3","3","3","2","2","2","3","3","3","4","4","4")
colData=as.data.frame(cbind(colnames(countData), inh, treatment, nested, extra))
dds=DESeqDataSetFromMatrix(countData = countData, colData =  colData, design= ~inh+treatment)
model.matrix(~inh+treatment, colData)
treatment=as.factor(c(1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6))
inh=c(1,1,1,1,1,1,1,1,1,2,2,2,1,1,1,2,2,2)
nested=c(rep(1:3,6))
extra=c("1","1","1","2","2","2","3","3","3","2","2","2","3","3","3","4","4","4")
colData=as.data.frame(cbind(colnames(countData), inh, treatment, nested, extra))
model.matrix(~inh+treatment, colData)
model.matrix(~inh:treatment, colData)
dds=DESeqDataSetFromMatrix(countData = countData, colData =  colData, design= ~inh:treatment)
dds=DESeqDataSetFromMatrix(countData = countData, colData =  colData, design= ~inh:treatment:nested)
model.matrix(~inh:treatment, colData)
model.matrix(~inh:treatment:nested, colData)
model.matrix(~inh:treatment:nested, colData)
colData
model.matrix(~inh+treatment:nested, colData)
group <- factor(rep(1:3,each=6))
condition <- factor(rep(rep(c("A","B","C"),each=2),3))
d <- DataFrame(group, condition)[-c(17,18),]
as.data.frame(d)
d <- DataFrame(group, condition)
d
mm=model.matrix(~inh:treatment+inh+treatment, colData)
mm
unname(mm)
all.zero <- apply(m1, 2, function(x) all(x==0))
all.zero
all.zero <- apply(mm, 2, function(x) all(x==0))
all.zero
idx <- which(all.zero)
mm <- mm[,-idx]
unname(mm)
dds=DESeqDataSetFromMatrix(countData = countData, mm)
DESeqDataSetFromMatrix(
DESeqDataSetFromMatrix
?DESeqDataSetFromMatrix
dds=DESeqDataSetFromMatrix(countData = countData, mm)
dds=DESeqDataSetFromMatrix(countData = countData, design=mm)
dds=DESeqDataSetFromMatrix(countData = countData, coldata=colData, design=mm)
dds=DESeqDataSetFromMatrix(countData = countData, colData=colData, design=mm)
mm
idx <- which(all.zero)
mm <- mm[,-idx]
unname(mm)
colData=as.data.frame(cbind(colnames(countData), inh, treatment))
dds=DESeqDataSetFromMatrix(countData = countData, colData = colData, design=~inh+treatment)
model.matrix(inh+treatment)
model.matrix(inh+treatment,colData)
model.matrix(~inh+treatment,colData)
colData
model.matrix(inh+treatment)
model.matrix(~inh+treatment,colData)
model.matrix(~treatment+inh,colData)
colData, design=~+treatment+inh)
dds=DESeqDataSetFromMatrix(countData = countData, colData = colData, design=~+treatment+inh)
colData
dds=DESeqDataSetFromMatrix(countData = countData, colData = colData, design=~(treatment+inh)[-treatment6])
dds=DESeqDataSetFromMatrix(countData = countData, colData = colData, design=~(treatment+inh)
dds=DESeqDataSetFromMatrix(countData = countData, colData = colData, design=~treatment+inh)
dds=DESeqDataSetFromMatrix(countData = countData, colData = colData, design=~treatment+inh, ignoreRank = TRUE)
dds=DESeq(dds)
dds=DESeqDataSetFromMatrix(countData = countData, colData = colData, design=~treatment+inh, ignoreRank = TRUE)
dds=DESeq(dds, betaPrior = FALSE)
dds=DESeqDataSetFromMatrix(countData = countData, colData = colData, design=~inh)
dds=DESeq(dds)
dds= dds[rowSums(counts(dds))>5,]
nrow(dds)
detectGroups <- function (x){  # x are col names
tem <- gsub("[0-9]*$","",x) # Remove all numbers from end
#tem = gsub("_Rep|_rep|_REP","",tem)
tem <- gsub("_$","",tem); # remove "_" from end
tem <- gsub("_Rep$","",tem); # remove "_Rep" from end
tem <- gsub("_rep$","",tem); # remove "_rep" from end
tem <- gsub("_REP$","",tem)  # remove "_REP" from end
return( tem )
}
library(gplots)
hclust2 <- function(x, method="average", ...)  # average linkage in hierarchical clustering
hclust(x, method=method, ...)
n=10000 # number of top genes by standard deviation
x = assay(rld)
if(n>dim(x)[1]) n = dim(x)[1] # max	as data
x = x[order(apply(x,1,sd),decreasing=TRUE),]  # sort genes by standard deviation
x = x[1:n,]   # only keep the n genes
# this will cutoff very large values, which could skew the color
x=as.matrix(x[1:n,])-apply(x[1:n,],1,mean)
cutoff = median(unlist(x)) + 4*sd (unlist(x))
x[x>cutoff] <- cutoff
cutoff = median(unlist(x)) - 4*sd (unlist(x))
x[x< cutoff] <- cutoff
groups = detectGroups(colnames(x) )
groups.colors = rainbow(length(unique(groups) ) )
lmat = rbind(c(5,4),c(0,1),c(3,2))
lwid = c(1.5,4)
lhei = c(1,.2,4)
heatmap.2(x, distfun = dist2,hclustfun=hclust2,
col=greenred(75), density.info="none", trace="none", scale="none", keysize=.5
,key=T, symkey=F
,ColSideColors=groups.colors[ as.factor(groups)]
,cexRow=1
,srtCol=45
,cexCol=1.  # size of font for sample names
,lmat = lmat, lwid = lwid, lhei = lhei
)
